import { Stack } from 'expo-router';
import { useEffect, useState, useCallback } from 'react';
import { Platform } from 'react-native';
import { testBackendConnection } from '../services/api';
import ENV from '../config/environment';
import { useUserStore } from '../context/userStore';
import { useAdStore } from '../context/adStore';
import * as SplashScreen from "expo-splash-screen";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { View, Text, TouchableOpacity, StyleSheet, Image, Modal, Animated, Dimensions, Alert } from "react-native";
import { useRouter } from "expo-router";
import { LinearGradient } from 'expo-linear-gradient';
import SubscriptionBanner from '@/components/SubscriptionBanner';
import UsageLimitBanner from '@/components/UsageLimitBanner';
import AppStateProvider from '@/components/AppStateProvider';
import { X, Star, CheckCircle2, Clock, Zap } from "lucide-react-native";
// Use a local image that exists in the project
import LogoImage from '../assets/icon.png';

export const unstable_settings = {
  // Ensure that reloading on `/modal` keeps a back button present.
  initialRouteName: "index",
};

// Prevent the splash screen from auto-hiding before asset loading is complete.
SplashScreen.preventAutoHideAsync();

// Handle font loading issues in a safer way
if (Platform.OS === 'web' && typeof window !== 'undefined') {
  // Instead of modifying FontFace directly, we'll use a more controlled approach
  // to handle font loading errors
  console.log('Setting up font loading error handling for web platform');
}

const { width } = Dimensions.get('window');

export default function RootLayout() {
  // Log API initialization
  useEffect(() => {
    console.log('✅ API initialized with base URL:', ENV.API_URL);
  }, []);

  // State management
  const [isReady, setIsReady] = useState(false);
  const [showFeedbackPopup, setShowFeedbackPopup] = useState(false);
  const [rating, setRating] = useState(0);
  const [popupAnimation] = useState(new Animated.Value(0));
  const router = useRouter();
  
  // User and ad store hooks
  const { 
    initialize: initializeUser, 
    usage, 
    subscription,
    isLoading: isUserLoading 
  } = useUserStore();
  
  const { refreshAdStatus } = useAdStore();
  
  // Show daily limit popup based on user store data
  const [showDailyLimitPopup, setShowDailyLimitPopup] = useState(false);
  
  // Track app initialization stages
  const [initStage, setInitStage] = useState('loading'); // loading -> onboarding -> auth -> home
  
  // Custom loading state for splash screen
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [loadingMessage, setLoadingMessage] = useState('Initializing...');
  const loadingAnimation = new Animated.Value(0);

  // Animation for loading progress
  useEffect(() => {
    Animated.timing(loadingAnimation, {
      toValue: loadingProgress,
      duration: 500,
      useNativeDriver: false
    }).start();
  }, [loadingProgress]);

  useEffect(() => {
    async function initializeApp() {
      try {
        // STAGE 1: LOADING
        console.log('🔄 RootLayout: Starting app initialization (LOADING stage)');
        setInitStage('loading');
        setLoadingProgress(10);
        setLoadingMessage('Initializing app...');
        
        // Keep splash screen visible during loading
        await SplashScreen.preventAutoHideAsync().catch(e => 
          console.warn('Error preventing splash screen auto-hide:', e)
        );
        
        // Test backend connection
        setLoadingProgress(20);
        setLoadingMessage('Connecting to backend...');
        try {
          const connectionStatus = await testBackendConnection();
          if (connectionStatus.success) {
            console.log('✅ Backend connection successful:', connectionStatus.message);
            setLoadingProgress(30);
          } else {
            console.warn('⚠️ Backend connection warning:', connectionStatus.message);
            setLoadingProgress(25);
          }
        } catch (error) {
          console.error('❌ Backend connection error:', error);
          // Continue anyway, as the app can work with some features offline
        }
        
        // Initialize user state (includes usage tracking)
        setLoadingProgress(40);
        setLoadingMessage('Loading user data...');
        await initializeUser();
        console.log('✅ RootLayout: User initialized');
        setLoadingProgress(60);
        
        // Refresh ad status based on subscription
        setLoadingMessage('Preparing ads service...');
        refreshAdStatus();
        console.log('✅ RootLayout: Ad status refreshed');
        setLoadingProgress(80);
        
        // STAGE 2: Check if user needs ONBOARDING
        setLoadingProgress(85);
        setLoadingMessage('Checking onboarding status...');
        const hasCompletedOnboarding = await AsyncStorage.getItem('hasCompletedOnboarding');
        if (!hasCompletedOnboarding) {
          console.log('🔄 RootLayout: User needs onboarding');
          setLoadingProgress(100);
          setLoadingMessage('Loading onboarding...');
          setInitStage('onboarding');
          
          // Small delay to show 100% before hiding splash screen
          await new Promise(resolve => setTimeout(resolve, 500));
          setIsReady(true);
          await SplashScreen.hideAsync();
          // Router will direct to index.tsx which contains onboarding
          return;
        }
        
        // STAGE 3: Check if user needs AUTH
        setLoadingProgress(90);
        setLoadingMessage('Checking authentication...');
        const isAuthenticated = await AsyncStorage.getItem('authToken');
        if (!isAuthenticated) {
          console.log('🔄 RootLayout: User needs authentication');
          setLoadingProgress(100);
          setLoadingMessage('Loading authentication...');
          setInitStage('auth');
          
          // Small delay to show 100% before hiding splash screen
          await new Promise(resolve => setTimeout(resolve, 500));
          setIsReady(true);
          await SplashScreen.hideAsync();
          router.replace('/auth');
          return;
        }
        
        // STAGE 4: Proceed to HOME
        console.log('🔄 RootLayout: Proceeding to home');
        setLoadingProgress(100);
        setLoadingMessage('Loading home...');
        setInitStage('home');
        
        // Show daily limit popup if limit is reached
        if (usage.reachedDailyLimit && subscription.status !== 'premium') {
          setShowDailyLimitPopup(true);
          animatePopup();
        }
        
        // Show feedback popup after 5 total uses
        if (usage.totalUsageCount === 5) {
          setTimeout(() => {
            setShowFeedbackPopup(true);
            animatePopup();
          }, 2000);
        }
        
        // App is ready
        setIsReady(true);
        await SplashScreen.hideAsync();
        router.replace('/(tabs)');
        
      } catch (e) {
        console.warn('❌ RootLayout: Error during app initialization:', e);
        // Even on error, we need to proceed to avoid white screen
        setIsReady(true);
        await SplashScreen.hideAsync().catch(() => {});
      }
    }

    initializeApp();
    
    // Safety timeout to prevent infinite loading
    const timeout = setTimeout(() => {
      if (!isReady) {
        console.log('⚠️ RootLayout: Force completing initialization after timeout');
        setIsReady(true);
        SplashScreen.hideAsync().catch(() => {});
        // Try to navigate to a safe screen
        if (initStage === 'loading') {
          router.replace('/index');
        }
      }
    }, 5000);
    
    return () => clearTimeout(timeout);
  }, []);
  
  // Update UI when usage changes
  useEffect(() => {
    if (usage.reachedDailyLimit && subscription.status !== 'premium') {
      setShowDailyLimitPopup(true);
      animatePopup();
    } else {
      setShowDailyLimitPopup(false);
    }
  }, [usage.reachedDailyLimit, subscription.status]);

  const animatePopup = () => {
    Animated.sequence([
      Animated.timing(popupAnimation, {
        toValue: 1,
        duration: 400,
        useNativeDriver: true,
      }),
      Animated.timing(popupAnimation, {
        toValue: 0.95,
        duration: 100,
        useNativeDriver: true,
      }),
      Animated.timing(popupAnimation, {
        toValue: 1,
        duration: 100,
        useNativeDriver: true,
      }),
    ]).start();
  };

  const handleWatchAd = () => {
    setShowDailyLimitPopup(false);
    // In a real app, this would show an ad
    setTimeout(() => {
      Alert.alert(
        'Ad Completed',
        'Thanks for watching! You have earned an additional scan.',
        [{ text: 'Continue', onPress: () => router.push('/camera') }]
      );
    }, 500);
  };

  const handleClosePopup = () => {
    setShowDailyLimitPopup(false);
  };

  const handleLimitedAccess = () => {
    setShowDailyLimitPopup(false);
    router.push('/');
  };

  const handleRateApp = (selectedRating: number) => {
    setRating(selectedRating);
  };

  const handleSubmitFeedback = () => {
    // In a real app, this would submit the feedback to a server
    setShowFeedbackPopup(false);
    Alert.alert('Thank You!', 'Your feedback helps us improve the app.');
  };

  const handleCloseFeedback = () => {
    setShowFeedbackPopup(false);
  };

  if (!isReady) {
    const LoadingScreen = require('../components/LoadingScreen').default;
    return <LoadingScreen message="Initializing MealLensAI..." />;
  }
  
  // We don't need error handling here as we're bypassing the loading screen
  if (false) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#1A1A1A', padding: 20 }}>
        <Text style={{ color: 'red', fontSize: 18, marginBottom: 10 }}>Error Loading App</Text>
        <Text style={{ color: 'white', fontSize: 14, marginBottom: 20, textAlign: 'center' }}>
          An error occurred
        </Text>
        <TouchableOpacity 
          style={{ padding: 12, backgroundColor: '#FF6A00', borderRadius: 8 }}
          onPress={() => window.location.reload()}
        >
          <Text style={{ color: 'white' }}>Retry</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <>
      <RootLayoutNav />
      
      {/* Daily Usage Limit Popup */}
      <Modal
        visible={showDailyLimitPopup}
        transparent={true}
        animationType="fade"
      >
        <View style={styles.modalOverlay}>
          <Animated.View 
            style={[
              styles.popupContainer,
              {
                transform: [
                  { scale: popupAnimation }
                ]
              }
            ]}
          >
            <LinearGradient
              colors={['#FF6A00', '#FF8F47']}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
              style={styles.popupHeader}
            >
              <TouchableOpacity 
                style={styles.closeButton}
                onPress={handleClosePopup}
              >
                <X size={20} color="#FFFFFF" />
              </TouchableOpacity>
              
              <View style={styles.limitReachedContainer}>
                <Zap size={28} color="#FFFFFF" />
                <Text style={styles.limitReachedText}>Daily Limit Reached</Text>
              </View>
              
              <Text style={styles.limitDescription}>
                You've used your 3 free scans for today!
              </Text>
            </LinearGradient>
            
            <View style={styles.popupContent}>
              <View style={styles.upgradeInfoContainer}>
                <Text style={styles.upgradeTitle}>Continue Using MealLens</Text>
                <Text style={styles.upgradeDescription}>
                  Watch a short ad to get an additional scan or wait until tomorrow for your free scans to reset.
                </Text>
              </View>
              
              <TouchableOpacity 
                style={styles.watchAdButton}
                onPress={handleWatchAd}
              >
                <Text style={styles.watchAdButtonText}>Watch Ad for Free Scan</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.limitedAccessButton}
                onPress={handleLimitedAccess}
              >
                <Text style={styles.limitedAccessText}>Return to Home</Text>
              </TouchableOpacity>
            </View>
          </Animated.View>
        </View>
      </Modal>

      {/* Feedback Popup */}
      <Modal
        visible={showFeedbackPopup}
        transparent={true}
        animationType="fade"
      >
        <View style={styles.modalOverlay}>
          <Animated.View 
            style={[
              styles.popupContainer,
              {
                transform: [
                  { scale: popupAnimation }
                ]
              }
            ]}
          >
            <View style={styles.feedbackHeader}>
              <TouchableOpacity 
                style={styles.feedbackCloseButton}
                onPress={handleCloseFeedback}
              >
                <X size={20} color="#202026" />
              </TouchableOpacity>
              
              <Text style={styles.feedbackTitle}>Enjoying MealLens?</Text>
              <Text style={styles.feedbackSubtitle}>
                We'd love to hear your feedback! Please rate your experience.
              </Text>
            </View>
            
            <View style={styles.ratingContainer}>
              {[1, 2, 3, 4, 5].map((star) => (
                <TouchableOpacity
                  key={star}
                  onPress={() => handleRateApp(star)}
                  style={styles.starButton}
                >
                  <Star 
                    size={36} 
                    color="#FF6A00" 
                    fill={rating >= star ? "#FF6A00" : "none"} 
                  />
                </TouchableOpacity>
              ))}
            </View>
            
            <TouchableOpacity 
              style={[
                styles.submitFeedbackButton,
                !rating && styles.disabledButton
              ]}
              onPress={handleSubmitFeedback}
              disabled={!rating}
            >
              <Text style={styles.submitFeedbackText}>Submit Feedback</Text>
            </TouchableOpacity>
          </Animated.View>
        </View>
      </Modal>
    </>
  );
}

function RootLayoutNav() {
  const renderLoadingScreen = () => {
    return (
      <View style={styles.loadingContainer}>
        <LinearGradient
          colors={['#1A1A1A', '#333333']}
          style={styles.loadingBackground}
        >
          <Image 
            source={require('../assets/images/logo.png')} 
            style={styles.loadingLogo} 
            resizeMode="contain"
          />
          <Text style={styles.loadingTitle}>MealLens AI</Text>
          <Text style={styles.loadingMessage}>{loadingMessage}</Text>
          
          <View style={styles.progressBarContainer}>
            <Animated.View 
              style={[styles.progressBar, {
                width: loadingAnimation.interpolate({
                  inputRange: [0, 100],
                  outputRange: ['0%', '100%']
                })
              }]} 
            />
          </View>
          
          <Text style={styles.loadingPercent}>{Math.round(loadingProgress)}%</Text>
        </LinearGradient>
      </View>
    );
  };

  return (
    <>
      {!isReady && renderLoadingScreen()}
      <AppStateProvider>
        <Stack
          screenOptions={{
            headerShown: false,
          }}
        >
          <Stack.Screen name="index" options={{ headerShown: false }} />
          <Stack.Screen name="auth" options={{ headerShown: false }} />
          <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
          <Stack.Screen name="modal" options={{ presentation: "modal" }} />
        </Stack>
      </AppStateProvider>

          {/* Feedback Popup */}
          <Modal
            visible={showFeedbackPopup}
            transparent={true}
            animationType="fade"
          >
            <View style={styles.modalOverlay}>
              <Animated.View 
                style={[
                  styles.popupContainer,
                  {
                    transform: [
                      { scale: popupAnimation }
                    ]
                  }
                ]}
              >
                <View style={styles.feedbackHeader}>
                  <TouchableOpacity 
                    style={styles.feedbackCloseButton}
                    onPress={handleCloseFeedback}
                  >
                    <X size={20} color="#202026" />
                  </TouchableOpacity>
                  
                  <Text style={styles.feedbackTitle}>Enjoying MealLens?</Text>
                  <Text style={styles.feedbackSubtitle}>
                    We'd love to hear your feedback! Please rate your experience.
                  </Text>
                </View>
                
                <View style={styles.ratingContainer}>
                  {[1, 2, 3, 4, 5].map((star) => (
                    <TouchableOpacity
                      key={star}
                      onPress={() => handleRateApp(star)}
                      style={styles.starButton}
                    >
                      <Star 
                        size={36} 
                        color="#FF6A00" 
                        fill={rating >= star ? "#FF6A00" : "none"} 
                      />
                    </TouchableOpacity>
                  ))}
                </View>
                
                <TouchableOpacity 
                  style={[
                    styles.submitFeedbackButton,
                    !rating && styles.disabledButton
                  ]}
                  onPress={handleSubmitFeedback}
                  disabled={!rating}
                >
                  <Text style={styles.submitFeedbackText}>Submit Feedback</Text>
                </TouchableOpacity>
              </Animated.View>
            </View>
          </Modal>
        </>
      );
    }

    function RootLayoutNav() {
      const renderLoadingScreen = () => {
        return (
          <View style={styles.loadingContainer}>
            <LinearGradient
              colors={['#1A1A1A', '#333333']}
              style={styles.loadingBackground}
            >
              <Image 
                source={require('../assets/images/logo.png')} 
                style={styles.loadingLogo} 
                resizeMode="contain"
              />
              <Text style={styles.loadingTitle}>MealLens AI</Text>
              <Text style={styles.loadingMessage}>{loadingMessage}</Text>
              
              <View style={styles.progressBarContainer}>
                <Animated.View 
                  style={[styles.progressBar, {
                    width: loadingAnimation.interpolate({
                      inputRange: [0, 100],
                      outputRange: ['0%', '100%']
                    })
                  }]} 
                />
              </View>
              
              <Text style={styles.loadingPercent}>{Math.round(loadingProgress)}%</Text>
            </LinearGradient>
          </View>
        );
      };

      return (
        <>
          {!isReady && renderLoadingScreen()}
          <AppStateProvider>
            <Stack
              screenOptions={{
                headerShown: false,
              }}
            >
              <Stack.Screen name="index" options={{ headerShown: false }} />
              <Stack.Screen name="auth" options={{ headerShown: false }} />
              <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
              <Stack.Screen name="modal" options={{ presentation: "modal" }} />
            </Stack>
          </AppStateProvider>
        </>
      );
    }

    const styles = StyleSheet.create({
      container: {
        flex: 1,
        backgroundColor: '#1A1A1A',
      },
      loadingContainer: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 1000,
        justifyContent: 'center',
        alignItems: 'center',
      },
      loadingBackground: {
        width: '100%',
        height: '100%',
        justifyContent: 'center',
        alignItems: 'center',
      },
      loadingLogo: {
        width: 120,
        height: 120,
        marginBottom: 20,
      },
      loadingTitle: {
        fontSize: 28,
        fontWeight: 'bold',
        color: '#FFFFFF',
        marginBottom: 10,
      },
      loadingMessage: {
        fontSize: 16,
        color: '#CCCCCC',
        marginBottom: 30,
      },
      progressBarContainer: {
        width: '80%',
        height: 8,
        backgroundColor: '#444444',
        borderRadius: 4,
        overflow: 'hidden',
      },
      progressBar: {
        height: '100%',
        backgroundColor: '#00C853',
      },
      loadingPercent: {
        fontSize: 14,
        color: '#CCCCCC',
        marginTop: 10,
      },
      // Daily Limit Popup Styles
      modalOverlay: {
        flex: 1,
        backgroundColor: 'rgba(0, 0, 0, 0.6)',
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
      },
      popupContainer: {
        width: width - 40,
        maxWidth: 400,
        backgroundColor: '#FFFFFF',
        borderRadius: 20,
        overflow: 'hidden',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 10 },
        shadowOpacity: 0.3,
        shadowRadius: 20,
        elevation: 10,
      },
      popupHeader: {
        padding: 20,
        position: 'relative',
      },
      closeButton: {
        position: 'absolute',
        top: 15,
        right: 15,
        width: 30,
        height: 30,
        borderRadius: 15,
        backgroundColor: 'rgba(255, 255, 255, 0.2)',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 10,
      },
      limitReachedContainer: {
        alignItems: 'center',
        marginTop: 10,
        marginBottom: 10,
      },
      limitReachedText: {
        fontSize: 22,
        fontWeight: '700',
        color: '#FFFFFF',
        marginTop: 10,
      },
      limitDescription: {
        fontSize: 16,
        color: '#FFFFFF',
        textAlign: 'center',
        marginBottom: 10,
      },
      popupContent: {
        padding: 20,
      },
      upgradeInfoContainer: {
        marginBottom: 20,
      },
      upgradeTitle: {
        fontSize: 18,
        fontWeight: '700',
        color: '#202026',
        marginBottom: 8,
        textAlign: 'center',
      },
      upgradeDescription: {
        fontSize: 14,
        color: '#6A6A6A',
        textAlign: 'center',
        lineHeight: 20,
      },
      watchAdButton: {
        backgroundColor: '#202026',
        borderRadius: 30,
        height: 50,
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom: 15,
        shadowColor: '#000000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 8,
        elevation: 5,
      },
      watchAdButtonText: {
        fontSize: 16,
        fontWeight: '600',
        color: '#FFFFFF',
      },
      limitedAccessButton: {
        height: 40,
        justifyContent: 'center',
        alignItems: 'center',
      },
      limitedAccessText: {
        fontSize: 14,
        color: '#6A6A6A',
      },
      
      // Feedback Popup Styles
      feedbackHeader: {
        padding: 20,
        position: 'relative',
        alignItems: 'center',
      },
      feedbackCloseButton: {
        position: 'absolute',
        top: 15,
        right: 15,
        width: 30,
        height: 30,
        borderRadius: 15,
        backgroundColor: '#F5F5F5',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 10,
      },
      feedbackTitle: {
        fontSize: 22,
        fontWeight: '700',
        color: '#202026',
        marginTop: 10,
        marginBottom: 10,
      },
      feedbackSubtitle: {
        fontSize: 14,
        color: '#6A6A6A',
        textAlign: 'center',
        marginBottom: 10,
        lineHeight: 20,
      },
      ratingContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        marginVertical: 20,
      },
      starButton: {
        marginHorizontal: 8,
      },
      submitFeedbackButton: {
        backgroundColor: '#202026',
        borderRadius: 30,
        height: 50,
        justifyContent: 'center',
        alignItems: 'center',
        marginHorizontal: 20,
        marginBottom: 20,
        shadowColor: '#000000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 8,
        elevation: 5,
      },
      submitFeedbackText: {
        fontSize: 16,
        fontWeight: '600',
        color: '#FFFFFF',
      },
      disabledButton: {
        backgroundColor: 'rgba(32, 32, 38, 0.7)',
      },
    });
    maxWidth: 400,
    backgroundColor: '#FFFFFF',
    borderRadius: 20,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 10 },
    shadowOpacity: 0.3,
    shadowRadius: 20,
    elevation: 10,
  },
  popupHeader: {
    padding: 20,
    position: 'relative',
  },
  closeButton: {
    position: 'absolute',
    top: 15,
    right: 15,
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 10,
  },
  limitReachedContainer: {
    alignItems: 'center',
    marginTop: 10,
    marginBottom: 10,
  },
  limitReachedText: {
    fontSize: 22,
    fontWeight: '700',
    color: '#FFFFFF',
    marginTop: 10,
  },
  limitDescription: {
    fontSize: 16,
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 10,
  },
  popupContent: {
    padding: 20,
  },
  upgradeInfoContainer: {
    marginBottom: 20,
  },
  upgradeTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#202026',
    marginBottom: 8,
    textAlign: 'center',
  },
  upgradeDescription: {
    fontSize: 14,
    color: '#6A6A6A',
    textAlign: 'center',
    lineHeight: 20,
  },
  watchAdButton: {
    backgroundColor: '#202026',
    borderRadius: 30,
    height: 50,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 15,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 5,
  },
  watchAdButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  limitedAccessButton: {
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  limitedAccessText: {
    fontSize: 14,
    color: '#6A6A6A',
  },
  
  // Feedback Popup Styles
  feedbackHeader: {
    padding: 20,
    position: 'relative',
    alignItems: 'center',
  },
  feedbackCloseButton: {
    position: 'absolute',
    top: 15,
    right: 15,
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: '#F5F5F5',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 10,
  },
  feedbackTitle: {
    fontSize: 22,
    fontWeight: '700',
    color: '#202026',
    marginTop: 10,
    marginBottom: 10,
  },
  feedbackSubtitle: {
    fontSize: 14,
    color: '#6A6A6A',
    textAlign: 'center',
    marginBottom: 10,
    lineHeight: 20,
  },
  ratingContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginVertical: 20,
  },
  starButton: {
    marginHorizontal: 8,
  },
  submitFeedbackButton: {
    backgroundColor: '#202026',
    borderRadius: 30,
    height: 50,
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 20,
    marginBottom: 20,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 5,
  },
  submitFeedbackText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  disabledButton: {
    backgroundColor: 'rgba(32, 32, 38, 0.7)',
  },
});